'demo()'
demo()
help.start()
demo(graphics)
age <- c(1,3,5,2,11,9,3,9,12,3)
weight <- c(4.4,5.3,7.2,5.2,8.5,7.3,6.0,10.4,10.2,6.1)
mean(weight)
sd(weight)
cor(age,weight)
plot(age,weight)
q()
library(lattice)
library(nutshell)
data(births2006.smpl)
data()
getwd()
ls()
history(25)
setwd("c:/myprojects/project1")
options()
optins(digits=3)
options(digits=3)
x<- runif(20)
summary(x)
hist(x)
savehistory()
save.image()
q()
installed.packages()
getwd()
install.packages("gclus")
installed.packages()
lm(mpg~wt,data=mtcars)
lmfit<-lm(mpg~wt,data=mtcars)
summary(lmfit)
plot(lmfit)
cook<-cooks.distance(lmfit)
plot(cook)
predict(lmfit,mynewdata)
?lm
q()
a<-c{1,2,4,7,9}
a <- c(1,4,7,9,3)
a(4)
a{4}
a[4]
a[3]
a[5]
a[1]
b<-c{"Pranav","Hari","Siri","Venkat"}
b<-c("Pranav","Hari","Siri","Venkat")
b[1]
b[3]
a[2:4]
a[c(2,4)]
y<-matrix(1:20,nrow=5,ncol=4)
y
cells<-c(1,26,24,68)
rnames<-c("R1","R2")
cnames<-c("C1","C2")
mymatrix<-matrix(cells,nrow=2,ncol=2,byrow=TRUE,dimnames=list(rnames,cnames))
mymatrix
q()
con<- url("http://www.jhsph.edu","r")
x<- readlines(con)
x<- readLines(con)
head(x)
q()
source("http://www.openintro.org/stat/data/arbuthnot.R")}
source("http://www.openintro.org/stat/data/arbuthnot.R")
arbuthnot
dim(arbuthnot)
names(arbuthnot)
arbuthnot\$boys
plot(x = arbuthnot\$year, y = arbuthnot\$girls)
$boys
boys
q()
demo()
demo(package = .packages(all.available = TRUE))
q()
library(lattice)
library(nutsshell)
library(nutshell)
data(births2006.smpl)
pwd()
wd()
showwd()
getwd()
setwd("C:/Users/pranav/Documents")
rm(list=ls(all=TRUE))
setwd("C:/Users/pranav/Documents")
cars <-read.csv(file="cars.csv", header = TRUE, sep = ",", dec=".",fill = TRUE)
summary(cars)
attach(cars)
cars1 <- cars
# Converting the categorical variables into factors
cars$buying <- as.factor(cars$buying)
cars$maint <- as.factor(cars$maint)
cars$doors <- as.factor(cars$doors)
cars$persons <- as.factor(cars$persons)
cars$lug_boot <- as.factor(cars$lug_boot)
cars$safety <- as.factor(cars$safety)
cars$class <- as.factor(cars$class)
# Decison Tree
library(rpart)
attach(cars)
treefit <- rpart(cars$class~.,data=cars,method="class",cp=0.01)
plot(treefit,main="Classification Tree for Cars",margin=0.15,uniform=TRUE)
text(treefit,use.n=T)
printcp(treefit)
summary(treefit)
# Building Logistic Regression model
model <- glm(as.factor(class) ~.,data=cars, family=binomial("logit"))
fitted <- (model$fitted)
summary(model)
plot(model$fitted)
#Building Neural Networks model
attach(cars)
library(neuralnet)
nn <- neuralnet(class~buying+maint+doors+persons+lug_boot
+safety,
data=cars,
hidden=0)
plot(nn)
?data.frame
?c
c(1:10)
?nrow
?rm
?colnames
?merge
?seq
?rm
install.packages("nueralnet")
install.packages("neuralnet")
library(neuralnet)
nn <- neuralnet(class~buying+maint+doors+persons+lug_boot
+safety,
data=cars,
hidden=0)
plot(nn)
nn <- neuralnet(class~buying+maint+doors+persons+lug_boot
+safety,
data=cars,
hidden=0)
?data.frame
?c
c(1:10)
?nrow
?rm
?colnames
?merge
nn <- neuralnet(class~buying+maint+doors+persons+lug_boot+safety,data=cars,hidden=0)
plot(nn)
getwd()
cars <- read.csv("C:/Users/pranav/Documents/DMPA_data_sets/Data sets/cars.txt",stringsAsFactors = FALSE)
cars
head(cars)
names(cars)
cars$weight
cars.rsub <- cars[1:50,]
cars.rsub
cars.csub <- cars[, 1:3]
cars.csub
cars.rcsub <- cars[c(1,3,5), c(2,4)]
cars.rcsub
cars.vsub <- cars[which9cars$mpg >30),]
cars.vsub <- cars[which(cars$mpg >30),]
cars.vsub
mat <- matrix(0.0,nrow=3,ncol=2);mat
colnames(mat) <- c("Var1","Var2")
colnames(mat)
mat
firstletter <-"a"
weight <- cars$weight
weight
firstletter
par(mfrow=c(1,1))
par
par(mfrow=c(2,3))
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
cars2 <- read.csv("C:/Users/pranav/ocuments/DMPA_data_sets/Data sets/cars2.txt",stringsASFactors = FALSE)
cars2 <- read.csv("C:/Users/pranav/documents/DMPA_data_sets/Data sets/cars2.txt",stringsASFactors = FALSE)
cars2 <- read.csv("C:/Users/pranav/documents/DMPA_data_sets/Data sets/cars2.txt",stringsAsFactors = FALSE)
head(cars2)
cars.4var <- cars[,c(1,3,4,8)]
head(cars.4var)
cars.4var[2,2] <- cars.4var[4,4] <- NA
head(cars.4var)
cars.4var[2,2]<-0
cars.4var[4,4]<- "missing"
head(cars.4var)
mean(cars.mpg)
mean(cars$mpg)
mode(cars$brand)
mymode <- mode(cars$brand)
mymode
median(cars$mpg)
cars.4var[2,2]<- mean(na.omit(cars.4var$cubicinches))
o_t <-table(cars.4var$brand)
O-mode<-names(o_t [o_t==max(o_t)])
o_mode<-names(o_t)[o_t==max(o_t)]
cars.4var[4,4]<-o_mode
head(cars.4var)
obs_brand <- sample(na.omit(cars.4var$brand),1)
obs_brand
obs_brand <- sample(na.omit(cars.4var$brand),2)
obs_brand
cars.4var[4,4]<-obs_brand
obs_brand <- sample(na.omit(cars.4var$brand),1)
cars.4var[4,4]<-obs_brand
head(cars.4var)
par(mfrow=c(1,1))
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="green",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
hist(cars2$weight,breaks = 20, xlim=c(0,5000),col="green",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="green",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
box(which="plot",lty = "solid",col ="yellow")
par("mar")
par(mar=c(1,1,1,1))
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="green",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
box(which="plot",lty = "solid",col ="yellow")
box(which="plot",lty = "solid",col ="red")
box(which="plot",lty = "solid",col ="red")
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="green",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
length(cars$weight)
sd(cars$weight)
summary(cars$weight)
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="red",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
hist(cars2$weight,breaks = 30, xlim=c(0,5000),col="magenta",border="blue",ylim=c(0,40),xlab="Weight",ylab="Counts",main="Histogram of Car Weights")
plot(cars2$weight,cars2$mpg,xlim=c(0,5000),ylim=c(0,600),xlab="Weight",ylab="Mpg",main="Scatter Plot of MPG By Weight",type="p",pch=16,col="blue")
points(cars2$weight,cars2$mpg,type="p",col="black")
points(cars2$weight,cars2$mpg,type="p",col="yellow")
points(cars2$weight,cars2$mpg,type="p",col="red")
summary(cars$weight)
mi<-min(cars$weight)
ma<-max(Cars$weight)
ma<-max(cars$weight)
mi
ma
minmax.weight<- (cars$weight - mi)/(ma-mi)
minmax.weight
m<-mean(cars$weight);s<-sd(cars$weight)
z.weight<-(cars$weight-m)/s
z.weight
length(cars$weight)
max(abs(cars$weight))
d.weight<-cars$weight/(10^4);d.weight
(3*(mean(cars$weight)-median(cars$weight)))/sd(cars$weight)
(3*(mean(z.weight)-median(z.weight))/sd(z.weight)
)
(3*(mean(z.weight)-median(z.weight)))/sd(z.weight)
sqrt.weight<- sqrt(cars$weight)
sqrt.weight
sqrt.weight_skew<-(3*(mean(sqrt.weight)-median(sqrt.weight)))/sd(sqrt.weight)
sqrt.weight_skew
ln.weight<-log(cars$weight)
ln.weight
ln.weight_skew<-(3*(mean(ln.weight)-median(ln.weight)))/sd(ln.weight)
ln.weight_skew
invsqrt.weight<-1/sqrt(cars$weight)
invsqrt.weight
invsqrt.weight_skew<-(3*(mean(invsqrt.weight)-median(invsqrt.weight)))/sd(invsqrt.weight)
invsqrt.weight_skew
x<-rnorm(1000000,mean=mean(invsqrt.weight),sd=sd(invsqrt.weight))
hist(invsqrt.weight,breaks=30,xlim=c(0.0125,0.0275),col="lightblue",prob=TRUE,border="black",xlab="Inverse Square Root of Weight",ylab="Counts",main="Histogram of Inverse Square Root Of Weight")
box(which = "plot",lty="solid",col="black")
lines(density(x),col="red")
anyDuplicated(cars)
duplicated(cars)
new.cars<-rbind(cars,cars[1,1])
anyDuplicated(new.cars)
new.cars<-rbind(cars,cars[1,])
anyDuplicated(new.cars)
cars
cars[order(cars$mpg)]
cars[order(cars$mpg),]
x<-cars$weight[1];y<-1/sqrt(x)
detransformedx<-1/y^2
x;y;detransformedx
savehistory("~/RDataMining practice.Rhistory")
x<-c(1,1,3:1,1:4,3);y<-c(9,9:1)
z<-c(2,1:9)
x
y
z
matrix<-t(rbind(x,y,z));matrix
savehistory("~/RDataMining practice.Rhistory")
qqnorm(invsqrt.weight,data=TRUE,col="red",ylim=c(0.01,0.03),main="Normal Q-Q Plot of Inverse Square Root of Weight")
qqline(invsqrt.weight,col="blue",datax=TRUE)
savehistory("~/RDataMining practice.Rhistory")
north_flag<-easst_flag<-south_flag<-c(rep(NA,10))
region<-c(rep(c("north","south","east","west"),2),"north","south")
region
for(i in 1:length(region)) {}
for(i in 1:length(region)) {if(region[i]=="north") north_flag[i] = 1 else north_flag[i] = 0 if (region[i]== "east") east_flag[i] = 1 else east_flag[i] = 0 if (region[i]=="south") south_flag[i] = 1 else south_flag[i] = 0 }
for(i in 1:length(region)) {if(region[i]=="north") north_flag[i] = 1 else north_flag[i] = 0 if (region[i]== "east") east_flag[i] = 1 else east_flag[i] = 0 if (region[i]=="south") south_flag[i] = 1 else south_flag[i] = 0 }
for(i in 1:length(region)) {if(region[i]=="north") north_flag[i] = 1 else north_flag[i] = 0 if (region[i]== "east") east_flag[i] = 1 else east_flag[i] = 0 if (region[i]=="south") south_flag[i] = 1 else south_flag[i] = 0 }
savehistory("~/RDataMining practice.Rhistory")
